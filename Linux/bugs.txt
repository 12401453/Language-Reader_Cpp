1.) Updating a lemma-meaning does not change the tooltip for other different-formed versions of that lemma in the same text (need to change updateLemmaTooltip() to look for same lemma_ids, which is not really possible without more database lookups because I purposefully do not store lemma_id's as data-attributes in the HTML)


3.) the multiword-annotation is blocked by fullstops in the writing of Danish dates ("19. juli"), which might indicate that a better approach would be a dumb 50-words either side rather than also blocking on Unicode sentence-boundaries.

7.) Searching for English words on the PONS German dictionary usually fails if they are normal full entries, so the structure of that type of page must be different, but searching for German words on the PONS Polish or whatever dictionaries just give normal German -> Polish results, so this is not really a problem because it's not meant for looking up English words and anyway you can do that with the dict.cc one

8.) would possibly be a good idea to add a "default meaning" checkbox to the lemma_translation interface, so that if one first comes across a very rare sense of a word and assigns it to meaning_no 1 not all further occurences of the more common meaning of said word will be auto-annotated wrongly and require manual intervention. Currently if you switch the meanings around it will mess up all the previous occurences which have been manually-annotated.

9. word-internal full-stops don't cause word-breaking, because ICU's BreakIterator doesn't view these as word-boundaries (similar to apostrophes). This is rarely a serious problem but ideally I need a BreakIterator that just has `[\p{Letter}]+` as the rule for what not to break on. Otherwise I would need to find another extremely obscure punctuation-letter to replace the full-stops with in order to get them to cause breaking, so it may be easier to just dispense with the BreakIterator altogether and do it manually using that regex

10. The words-browser page puts a lot of strain on the browser's rendering-capacity when there are more than about 1000 lemmas (the actual javascript objects aren't a problem, they are just sitting in RAM and even the incredibly inefficient Array.map() functions I am using don't have any performance issues even on really shit hardware, it's the graphical HTML rendering that is slowing it down), so I think it would be best to cap the display of words at about 500, but include a pagination-system so it's still possible to manually browse through the whole lot, and the search functions and POS-selection-buttons will work exactly the same but again cap displayed results at 500 with pagination. It would also be good to (by default?) randomise the order in which the words are displayed so one is reminded of different words each time one looks at that page.
